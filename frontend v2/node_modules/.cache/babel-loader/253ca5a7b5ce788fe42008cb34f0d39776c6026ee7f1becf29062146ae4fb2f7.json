{"ast":null,"code":"// Function to select a player for a participant\nconst selectPlayer = async player => {\n  if (player.selected || !selectedParticipant) {\n    console.error(\"El jugador ya está seleccionado o no se ha seleccionado un participante.\");\n    return;\n  }\n  try {\n    // Limitar los picks a 5\n    const participant = participants.find(p => p.id === selectedParticipant);\n    if (!participant) {\n      alert('No participant selected');\n      return;\n    }\n    if (participant.picks.length >= 5) {\n      alert('El participante ya tiene 5 jugadores seleccionados');\n      return;\n    }\n    const newPickOrder = participant.picks.length + 1;\n    console.log(`Attempting to pick player ${player.id} for participant ${selectedParticipant} with order ${newPickOrder}`);\n\n    // Hacer el pick a través de la API\n    const response = await api.pickPlayer(selectedParticipant, player.id, newPickOrder);\n    console.log('Response from server:', response);\n    if (response.status === 200) {\n      // Actualiza el estado en el frontend para reflejar la selección\n      const updatedPlayers = players.map(p => p.id === player.id ? {\n        ...p,\n        selected: true,\n        selectedBy: selectedParticipant\n      } : p);\n      const updatedParticipants = participants.map(p => p.id === selectedParticipant ? {\n        ...p,\n        picks: [...p.picks, {\n          playerId: player.id,\n          pickOrder: newPickOrder\n        }]\n      } : p);\n      setPlayers(updatedPlayers);\n      setParticipants(updatedParticipants);\n    } else {\n      console.error('Hubo un problema con la solicitud:', response);\n      alert(\"Error selecting player. Please try again or check the server logs.\");\n    }\n  } catch (error) {\n    console.error(\"Error selecting player:\", error);\n    alert(\"Error selecting player. Please try again or check the server logs.\");\n  }\n};","map":{"version":3,"names":["selectPlayer","player","selected","selectedParticipant","console","error","participant","participants","find","p","id","alert","picks","length","newPickOrder","log","response","api","pickPlayer","status","updatedPlayers","players","map","selectedBy","updatedParticipants","playerId","pickOrder","setPlayers","setParticipants"],"sources":["C:/Users/tebie/Documents/fantasix-draft/frontend v2/src/components/Draft.js"],"sourcesContent":["// Function to select a player for a participant\r\nconst selectPlayer = async (player) => {\r\n  if (player.selected || !selectedParticipant) {\r\n      console.error(\"El jugador ya está seleccionado o no se ha seleccionado un participante.\");\r\n      return;\r\n  }\r\n\r\n  try {\r\n      // Limitar los picks a 5\r\n      const participant = participants.find(p => p.id === selectedParticipant);\r\n      if (!participant) {\r\n          alert('No participant selected');\r\n          return;\r\n      }\r\n\r\n      if (participant.picks.length >= 5) {\r\n          alert('El participante ya tiene 5 jugadores seleccionados');\r\n          return;\r\n      }\r\n\r\n      const newPickOrder = participant.picks.length + 1;\r\n\r\n      console.log(`Attempting to pick player ${player.id} for participant ${selectedParticipant} with order ${newPickOrder}`);\r\n\r\n      // Hacer el pick a través de la API\r\n      const response = await api.pickPlayer(selectedParticipant, player.id, newPickOrder);\r\n      console.log('Response from server:', response);\r\n\r\n      if (response.status === 200) {\r\n          // Actualiza el estado en el frontend para reflejar la selección\r\n          const updatedPlayers = players.map(p => p.id === player.id ? { ...p, selected: true, selectedBy: selectedParticipant } : p);\r\n          const updatedParticipants = participants.map(p => p.id === selectedParticipant ? { ...p, picks: [...p.picks, { playerId: player.id, pickOrder: newPickOrder }] } : p);\r\n\r\n          setPlayers(updatedPlayers);\r\n          setParticipants(updatedParticipants);\r\n      } else {\r\n          console.error('Hubo un problema con la solicitud:', response);\r\n          alert(\"Error selecting player. Please try again or check the server logs.\");\r\n      }\r\n  } catch (error) {\r\n      console.error(\"Error selecting player:\", error);\r\n      alert(\"Error selecting player. Please try again or check the server logs.\");\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,MAAOC,MAAM,IAAK;EACrC,IAAIA,MAAM,CAACC,QAAQ,IAAI,CAACC,mBAAmB,EAAE;IACzCC,OAAO,CAACC,KAAK,CAAC,0EAA0E,CAAC;IACzF;EACJ;EAEA,IAAI;IACA;IACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKP,mBAAmB,CAAC;IACxE,IAAI,CAACG,WAAW,EAAE;MACdK,KAAK,CAAC,yBAAyB,CAAC;MAChC;IACJ;IAEA,IAAIL,WAAW,CAACM,KAAK,CAACC,MAAM,IAAI,CAAC,EAAE;MAC/BF,KAAK,CAAC,oDAAoD,CAAC;MAC3D;IACJ;IAEA,MAAMG,YAAY,GAAGR,WAAW,CAACM,KAAK,CAACC,MAAM,GAAG,CAAC;IAEjDT,OAAO,CAACW,GAAG,CAAC,6BAA6Bd,MAAM,CAACS,EAAE,oBAAoBP,mBAAmB,eAAeW,YAAY,EAAE,CAAC;;IAEvH;IACA,MAAME,QAAQ,GAAG,MAAMC,GAAG,CAACC,UAAU,CAACf,mBAAmB,EAAEF,MAAM,CAACS,EAAE,EAAEI,YAAY,CAAC;IACnFV,OAAO,CAACW,GAAG,CAAC,uBAAuB,EAAEC,QAAQ,CAAC;IAE9C,IAAIA,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MACzB;MACA,MAAMC,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACb,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKT,MAAM,CAACS,EAAE,GAAG;QAAE,GAAGD,CAAC;QAAEP,QAAQ,EAAE,IAAI;QAAEqB,UAAU,EAAEpB;MAAoB,CAAC,GAAGM,CAAC,CAAC;MAC3H,MAAMe,mBAAmB,GAAGjB,YAAY,CAACe,GAAG,CAACb,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKP,mBAAmB,GAAG;QAAE,GAAGM,CAAC;QAAEG,KAAK,EAAE,CAAC,GAAGH,CAAC,CAACG,KAAK,EAAE;UAAEa,QAAQ,EAAExB,MAAM,CAACS,EAAE;UAAEgB,SAAS,EAAEZ;QAAa,CAAC;MAAE,CAAC,GAAGL,CAAC,CAAC;MAErKkB,UAAU,CAACP,cAAc,CAAC;MAC1BQ,eAAe,CAACJ,mBAAmB,CAAC;IACxC,CAAC,MAAM;MACHpB,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEW,QAAQ,CAAC;MAC7DL,KAAK,CAAC,oEAAoE,CAAC;IAC/E;EACJ,CAAC,CAAC,OAAON,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/CM,KAAK,CAAC,oEAAoE,CAAC;EAC/E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}