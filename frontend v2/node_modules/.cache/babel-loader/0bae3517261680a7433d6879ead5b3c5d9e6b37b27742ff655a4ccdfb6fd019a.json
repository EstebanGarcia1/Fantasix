{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tebie\\\\Documents\\\\fantasix-draft\\\\frontend v2\\\\src\\\\context\\\\FantasyContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/FantasyContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../services/api';\n\n// Crear el contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FantasyContext = /*#__PURE__*/createContext();\nexport const FantasyProvider = ({\n  children\n}) => {\n  _s();\n  const [participants, setParticipants] = useState([]);\n  const [players, setPlayers] = useState([]);\n  const [teams, setTeams] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const [participantsData, playersData, teamsData] = await Promise.all([api.fetchParticipants(), api.fetchPlayers(), api.fetchTeams()]);\n        setParticipants(participantsData.data.map(participant => ({\n          ...participant,\n          picks: participant.picks || [] // Asegúrate de que `picks` siempre sea un array.\n        })));\n        setPlayers(playersData.data);\n        setTeams(teamsData.data);\n      } catch (error) {\n        console.error('Error al obtener datos:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(FantasyContext.Provider, {\n    value: {\n      participants,\n      players,\n      teams,\n      loading,\n      setParticipants,\n      setPlayers,\n      setTeams\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para usar el contexto\n_s(FantasyProvider, \"4EEtTFNP17j5oxJMbA3ZJO2S4SE=\");\n_c = FantasyProvider;\nexport const useFantasy = () => {\n  _s2();\n  return useContext(FantasyContext);\n};\n_s2(useFantasy, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"FantasyProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","FantasyContext","FantasyProvider","children","_s","participants","setParticipants","players","setPlayers","teams","setTeams","loading","setLoading","fetchData","participantsData","playersData","teamsData","Promise","all","fetchParticipants","fetchPlayers","fetchTeams","data","map","participant","picks","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useFantasy","_s2","$RefreshReg$"],"sources":["C:/Users/tebie/Documents/fantasix-draft/frontend v2/src/context/FantasyContext.js"],"sourcesContent":["// src/context/FantasyContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\n\r\n// Crear el contexto\r\nconst FantasyContext = createContext();\r\n\r\nexport const FantasyProvider = ({ children }) => {\r\n  const [participants, setParticipants] = useState([]);\r\n  const [players, setPlayers] = useState([]);\r\n  const [teams, setTeams] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const [participantsData, playersData, teamsData] = await Promise.all([\r\n          api.fetchParticipants(),\r\n          api.fetchPlayers(),\r\n          api.fetchTeams(),\r\n        ]);\r\n\r\n        setParticipants(participantsData.data.map(participant => ({\r\n          ...participant,\r\n          picks: participant.picks || [] // Asegúrate de que `picks` siempre sea un array.\r\n        })));\r\n        setPlayers(playersData.data);\r\n        setTeams(teamsData.data);\r\n      } catch (error) {\r\n        console.error('Error al obtener datos:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <FantasyContext.Provider\r\n      value={{\r\n        participants,\r\n        players,\r\n        teams,\r\n        loading,\r\n        setParticipants,\r\n        setPlayers,\r\n        setTeams,\r\n      }}\r\n    >\r\n      {children}\r\n    </FantasyContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook personalizado para usar el contexto\r\nexport const useFantasy = () => {\r\n  return useContext(FantasyContext);\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,GAAG,MAAM,iBAAiB;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGP,aAAa,CAAC,CAAC;AAEtC,OAAO,MAAMQ,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFD,UAAU,CAAC,IAAI,CAAC;QAChB,MAAM,CAACE,gBAAgB,EAAEC,WAAW,EAAEC,SAAS,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACnEpB,GAAG,CAACqB,iBAAiB,CAAC,CAAC,EACvBrB,GAAG,CAACsB,YAAY,CAAC,CAAC,EAClBtB,GAAG,CAACuB,UAAU,CAAC,CAAC,CACjB,CAAC;QAEFf,eAAe,CAACQ,gBAAgB,CAACQ,IAAI,CAACC,GAAG,CAACC,WAAW,KAAK;UACxD,GAAGA,WAAW;UACdC,KAAK,EAAED,WAAW,CAACC,KAAK,IAAI,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC,CAAC;QACJjB,UAAU,CAACO,WAAW,CAACO,IAAI,CAAC;QAC5BZ,QAAQ,CAACM,SAAS,CAACM,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,SAAS;QACRd,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA,CAACC,cAAc,CAAC2B,QAAQ;IACtBC,KAAK,EAAE;MACLxB,YAAY;MACZE,OAAO;MACPE,KAAK;MACLE,OAAO;MACPL,eAAe;MACfE,UAAU;MACVE;IACF,CAAE;IAAAP,QAAA,EAEDA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;;AAED;AAAA7B,EAAA,CAjDaF,eAAe;AAAAgC,EAAA,GAAfhC,eAAe;AAkD5B,OAAO,MAAMiC,UAAU,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC9B,OAAOzC,UAAU,CAACM,cAAc,CAAC;AACnC,CAAC;AAACmC,GAAA,CAFWD,UAAU;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}